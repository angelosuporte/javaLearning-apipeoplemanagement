package com.challenge.personapi.service;

import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.challenge.personapi.dto.request.PersonDTO;
import com.challenge.personapi.dto.response.MessageResponseDTO;
import com.challenge.personapi.entity.Person;
import com.challenge.personapi.exception.PersonNotFoundException;
import com.challenge.personapi.mapper.PersonMapper;
import com.challenge.personapi.repository.PersonRepository;

@Service
public class PersonService {
	
	private PersonRepository personRepository;
	
	private final PersonMapper personMapper = PersonMapper.INSTANCE;

	@Autowired
	public PersonService(PersonRepository personRepository) {
		this.personRepository = personRepository;
	}
	
	public MessageResponseDTO createPerson(PersonDTO personDTO) {
		Person personToSave = personMapper.toModel(personDTO);
		
		Person savedPerson = personRepository.save(personToSave);
		return createMessageResponse(savedPerson, "Created person with ID" + savedPerson);
			
	}

	public List<PersonDTO> listAll() {
		List<Person> allPeople = personRepository.findAll();
		return allPeople.stream().map(personMapper::toDTO).collect(Collectors.toList());
	}

	public PersonDTO findById(Long id) throws PersonNotFoundException{
		Person person = verifyIdIfExists(id);
		return personMapper.toDTO(person);
	}

	public void delete(Long id) throws PersonNotFoundException{
		verifyIdIfExists(id);
		
		personRepository.deleteById(id);
	}
	
	private Person verifyIdIfExists(Long id) throws PersonNotFoundException{
		return personRepository.findById(id).orElseThrow(() -> new PersonNotFoundException(id));
	}

	public MessageResponseDTO updateById(Long id, @Valid PersonDTO personDTO) throws PersonNotFoundException {
		verifyIdIfExists(id);
		
		Person personToUpdate = personMapper.toModel(personDTO);
		
		Person savedPerson = personRepository.save(personToUpdate);
		return createMessageResponse(savedPerson, null);
	}

	private MessageResponseDTO createMessageResponse(Person savedPerson, String s) {
		return MessageResponseDTO
				.builder()
				.message("Updated person with ID" + savedPerson.getId())
				.build();
	}
}
